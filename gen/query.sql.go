// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package gen

import (
	"context"
)

const createVisit = `-- name: CreateVisit :one
INSERT INTO visit (start_time_unix, length_second)
VALUES (?,?)
RETURNING id
`

type CreateVisitParams struct {
	StartTimeUnix int64
	LengthSecond  int64
}

func (q *Queries) CreateVisit(ctx context.Context, arg CreateVisitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createVisit, arg.StartTimeUnix, arg.LengthSecond)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listVisit = `-- name: ListVisit :many
;

SELECT id, start_time_unix, length_second FROM visit
`

func (q *Queries) ListVisit(ctx context.Context) ([]Visit, error) {
	rows, err := q.db.QueryContext(ctx, listVisit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visit
	for rows.Next() {
		var i Visit
		if err := rows.Scan(&i.ID, &i.StartTimeUnix, &i.LengthSecond); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
